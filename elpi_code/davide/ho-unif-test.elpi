accumulate ho-unif.

pred test-bind.
test-bind :-
  pi x y z\ sigma T\
    T =  app [const 0, (abs w\ app [x, w, uv 0, app [uv 1, x, y]])],
    bind [x, y, z] T R,
    print R.

pred test-unif-beta.
% (λx. f x) 1 = f 1
test-unif-beta :-
    T1 = app [abs (w\ app [const 0, w]), const 1],
    T2 = app [const 0, const 1],
    unif T1 T2 [] T,
    print T2 T.

pred test-unif-beta-1.
% (λx. x) 1 = 1
test-unif-beta-1 :-
    T1 = app [abs (w\ w), const 1],
    T2 = const 1,
    unif T1 T2 [] T,
    print T2 T.

pred test-unif-1.
% F x y = G y x
test-unif-1 :-
  pi x y\ sigma T1 T2\
    T1 = app [uv 1, x, y],
    T2 = app [uv 2, y, x],
    unif T1 T2 [] T,
    print "Final Theta = " T.

pred test-unif-2.
% F x y = 2
test-unif-2 :-
  pi x y\ sigma T1 T2\
    T1 = app [uv 1, x, y],
    T2 = const 2,
    unif T1 T2 [] T,
    print "Final Theta = " T.

pred test-unif-3.
% ETA : (λ x. f x) = f
test-unif-3 :-
  pi x y\ sigma T1 T2\
    T1 = abs (x\ app[const 0, x]),
    T2 = const 0,
    unif T1 T2 [] T,
    print "Final Theta = " T.

pred test-unif-4.
% X x y = G y x, G y x = x
test-unif-4 :-
  pi x y\ sigma T1 T2 T3\
    T1 = app [uv 1, x, y],
    T2 = app [uv 2, y, x],
    T3 = x,
    unif T1 T2 [] T,
    print "First Theta" T,
    unif T2 T3 T T',
    print "Final Theta = " T'.

pred test-unif-5.
% X x y = G y x, x = G y x
test-unif-5 :-
  pi x y\ sigma T1 T2 T3\
    T1 = app [uv 1, x, y],
    T2 = app [uv 2, y, x],
    T3 = x,
    unif T1 T2 [] T,
    print "First Theta" T,
    unif T3 T2 T T',
    print "Final Theta = " T'.

pred test-unif-6.
% X x y = G y x, G y x = x, x = G y x
test-unif-6 :-
  pi x y\ sigma T1 T2 T3\
    T1 = app [uv 1, x, y],
    T2 = app [uv 2, y, x],
    T3 = x,
    unif T1 T2 [] T,
    print "First Theta" T,
    unif T3 T2 T T',
    print "Second Theta" T',
    unif T2 T3 T' T'',
    print "Final Theta = " T''.

pred test-unif-7.
% λx y. F x y = λ x y. f y 
test-unif-7 :-
  pi f\ sigma T1 T2 T\
  T1 = (abs x\ abs y\ app [uv 0, x, y]),
  T2 = (abs x\ abs y\ app [f, y]),
  unif T1 T2 [] T,
  print T.

pred test-unif-8.
% X a = X
test-unif-8 :-
  pi f\ sigma T1 T2\
    T1 = app [uv 1, const 0],
    T2 = app [uv 1],
    not (unif T1 T2 [] _),
    print "Good: it fails".

main :-
  test-unif-beta-1.