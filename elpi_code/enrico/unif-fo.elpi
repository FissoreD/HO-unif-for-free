
namespace fo {

kind tm type.
type app tm -> tm -> tm.
type uv  nat -> tm.
type c string -> tm.

type unif tm -> tm -> list tm -> o.
unif (uv N) T S :- assigned? N S T1, unif T1 T S.
unif T (uv N) S :- assigned? N S T1, unif T T1 S.
unif (uv N) T S :- not(assigned? N S _), not (occ N T), assign N S T.
unif T (uv N) S :- not(assigned? N S _), not (occ N T), assign N S T.
unif (app H1 A1) (app H2 A2) S :- unif H1 H2 S, unif A1 A2 S.
unif (c X) (c X) _.

type occ nat -> tm -> o.
occ N (uv N).
occ N (app A B) :- occ N A ; occ N B.

type equal tm -> tm -> list tm -> o.
equal (app H A) (app H1 A1) S :- equal H H1 S, equal A A1 S.
equal (uv N) T1 S :- assigned? N S T, equal T T1 S.
equal T1 (uv N) S :- assigned? N S T, equal T1 T S.
equal (c X) (c X) _.
equal (uv N) (uv N) _.



}