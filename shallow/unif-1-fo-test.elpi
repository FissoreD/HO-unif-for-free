macro @X :- fo.uv z.
macro @Y :- fo.uv (s z).
macro @Z :- fo.uv (s (s z)).
macro @f :- fo.c "f".
macro @g :- fo.c "g".
macro @h :- fo.c "h".
macro @a :- fo.c "a".
macro @b :- fo.c "b".
macro @c :- fo.c "c".
macro @app X Y :- fo.app X Y.

type fo.test-shallow test-shallow fo.tm -> o.
fo.test-shallow (test-shallow L R tt) :- fo.unif L R S, std.assert! (fo.validSO S) "invalid SO", std.assert! (fo.equal L R S) "bug".
fo.test-shallow (test-shallow L R ff) :- not(fo.unif L R _).

macro @ok X Y :- declare-test-shallow fo.test-shallow (test-shallow X Y tt).
macro @ko X Y :- declare-test-shallow fo.test-shallow (test-shallow X Y ff).

@ok (@app @f @X) (@app @f @a).
@ok (@app @X @a) (@app @f @a).
@ko (@app @f @X) (@X).
@ko (@app (@app @f @X) @X) (@app (@app @f @a) @b).
@ok (@app (@app @X @Y) @X) (@app (@app (@app @f @Y) @b) (@app @f @b)).
