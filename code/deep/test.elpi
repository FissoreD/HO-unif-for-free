shorten fo.{(==o) , parse, parse-eq}.

macro @read :- input_line std_in _.

shorten ho.{(==l)}.
shorten fo.{(==o)}.
typeabbrev tm ho.tm.
typeabbrev fm fo.fm.
typeabbrev subst ho.subst.
typeabbrev fsubst fo.fsubst.
typeabbrev links comp.links.
shorten comp.{ progress , comp , decompm }.

typeabbrev (diagn A) (triple diagnostic A A).

type valid-error string -> o.
valid-error uvar :- !, halt "Message error should not be flexible".
valid-error "unif" :- !.
valid-error "decompl" :- !.
valid-error H :- halt "Invalid message error" H.

%BEGIN

%SNIP: hstep
type hstep tm -> tm -> links -> links -> subst -> subst -> o.
hstep T1 T2 L1 L2 S1 S3 :-
  (T1 ==l T2) S1 S2,
  print "## After unif subst is" {ho.ppsubst S2}, % HIDE
  print "## Links are" {comp.pplinks L1}, % HIDE
  printC "solve links?", !, % HIDE
  progress L1 L2 S2 S3.
%ENDSNIP

%SNIP: unif_fo
type (===o) fm -> fm -> fsubst -> o.
(A ===o B) F :-
  fo.beta-reduce A A',
  fo.beta-reduce B B',
  comp A' A'' [] M1 [] [] [] S1,
  comp B' B'' M1 M2 [] [] S1 S2,
  hstep A'' B'' [] [] S2 S3,
  decompm M2 M2 S3 [] F.
%ENDSNIP

%END

type prolog 
  list (triple diagnostic ho.tm ho.tm) -> 
  comp.links -> comp.links ->
  ho.subst -> ho.subst ->
  diagnostic ->
  o.
prolog [] L L H H ok :- print "end proggram\n".
prolog [triple ok L R|Us] Links Links2 H H3 D :- !, std.do! [
  print "## prolog unif step" {ho.pp {ho.deref H L}} "=" {ho.pp {ho.deref H R}},
  hstep L R Links Links1 H H2,
  print "## After solve links, links are" {comp.pplinks Links1},
  print "## After solve links, subst is" {ho.ppsubst H2},
  ],
  !,
  printC "next problem?",
  prolog Us Links1 Links2 H2 H3 D.
prolog [triple (error X as E) L R|_] Links Links H H2 E :-
  valid-error X,
  print "## unif (error)" {ho.pp L} "=" {ho.pp R},
  if ((L ==l R) H H1)
     (print "## After unif" {ho.pp L} "=" {ho.pp R} "subst is" {ho.ppsubst H1},
      print "## Links are" {comp.pplinks {comp.deref-links H1 Links}},
      printC "solve links?",
      % if solve-link has success, then the error is decompl else 
      print "Before solve links fixpoint",
      if (comp.progress Links _ H1 H2) (X = "decompl") (X = "unif"))
     (H2 = H).

type decompile-subst
  comp.mmap -> 
  comp.links -> 
  ho.subst ->
  fo.fsubst ->
  fo.fsubst ->
  o.
decompile-subst Mappings Links H F F1 :-
  comp.decompile Mappings Links H F F1.
decompile-subst _ _ _ _ _ :- !, print "Fail decompl-subst", fail.

type build-fo-subst list (triple diagnostic fo.fm fo.fm) -> fo.fsubst -> fo.fsubst -> o.
build-fo-subst [] L L.
build-fo-subst [triple _ L R | TL] A D :-
  fo.extend-subst L A B, fo.extend-subst R B C,
  build-fo-subst TL C D.

type validate-solution 
  list (triple diagnostic fo.fm fo.fm) ->
  fo.fsubst ->
  o.
validate-solution [] _.
validate-solution [triple ok L R|Goals] FS :- 
  std.do![fo.fderef FS L L', fo.fderef FS R R',
  %  (L' ==o R'),
  if (L' ==o R') true (halt "Invalid solution:" {fo.pp L'} "=/=" {fo.pp R'}),
  validate-solution Goals FS].
validate-solution [triple (error _) _ _|_] _.

type same-sols list (option fo.fm) -> list (option fo.fm) -> o.
same-sols [] [].
same-sols [none|L] [none|M] :- !, same-sols L M.
same-sols [some A|L] [some A'|M] :- A ==o A', !, same-sols L M.
same-sols [] L :- if (forall1 ((=) none) L) true (halt "Invalid solution:" {fo.ppsubst L}).
same-sols L [] :- if (forall1 ((=) none) L) true (halt "Invalid solution:" {fo.ppsubst L}).
same-sols A B :- halt "INVALID SOL" {fo.ppsubst A} " =/= " {fo.ppsubst B}.


type check-sol option (list fo.fm) -> fo.fsubst -> o.
check-sol none _. 
check-sol (some Sol) L :-
  std.map Sol (x\r\ if (x = fo.fcon "_") (r = none) (r = some x)) L1,
  same-sols L L1. 

type do-read o.
:if "DEBUG"
do-read.

type printC string -> o.
printC A :- X = "@@@@@@@@@@@@@@@@@@@@@@@@@", print X A X, (not do-read; @read), !.

type ptest test fo.fm -> string -> o.
ptest (test _ (pr Pbs (some Sol))) S :-
  std.map Pbs (pppbsc fo.pp) S1,
  fo.ppsubst {std.map Sol (x\r\ r = some x)} S2,
  S is {std.string.concat "; " S1} ^ "\n==> " ^ {std.string.concat "; " S2}.
ptest (test _ (pr Pbs none)) S :-
  std.map Pbs (pppbsc fo.pp) S1,
  S is {std.string.concat "\n" S1} ^ "\n==> _".

type pppbsc (A -> string -> o) -> diagn A -> string -> o.
pppbsc F (triple _ A B) S :- tex, !, F A AS, F B BS, S is "{" ^ AS ^ "," ^ BS ^ "}".
pppbsc F (triple ok A B) S :- F A AS, F B BS, S is AS ^ " == " ^ BS.
pppbsc F (triple (error _) A B) S :- F A AS, F B BS, S is AS ^ " =/= " ^ BS.

type print-compil-result list (diagn fo.fm) -> list (diagn ho.tm) -> comp.links -> comp.mmap -> o.
print-compil-result C P L M :- tex, !, 
  Sep = "\n  ", Sep1 is "," ^ Sep ^ "  ",
  std.string.concat Sep1 {std.map C (pppbsc fo.pp)} Cpp,
  std.string.concat Sep1 {std.map P (pppbsc ho.pp)} Ppp, 
  std.string.concat Sep1 {comp.pplinks L} Lpp, 
  std.string.concat Sep1 {comp.ppmappings M} Mpp,
  R is "\\printAlll" ^ Sep ^ "{{" ^ Cpp ^ "}}" ^ Sep ^ "{{" ^ Ppp ^ "}}" ^ Sep ^ "{{" ^ Mpp ^ "}}" ^ Sep ^ "{{" ^ Lpp ^ "}}",
  print "The result of the compilation is",
  print R.

print-compil-result _ P L M :-
  print "## After compilation the terms are" {std.map P (pppbsc ho.pp)},
  print "## After compilation the links are" {comp.pplinks L},
  print "## After compilation the mappings are" {comp.ppmappings M}.

type xtest o -> test fo.fm -> o.
xtest Mode (test N (pr LR Sol) as Test) :- Mode => std.do![
  print "## Test" N ":" {ptest Test},
  printC "run test?",
  comp.compile-terms LR Uproblems Map2 Links2 HO_Subst1,
  print-compil-result LR Uproblems Links2 Map2,
  printC "continue to prolog?",
  prolog Uproblems Links2 Links1 HO_Subst1 HO_Subst2 D,
  if2 (D = ok) (
    print "## After prolog HO subst is" {ho.ppsubst HO_Subst2},
    print "## After prolog links are" {comp.pplinks Links1},
    print "## After prolog mappings are" {comp.ppmappings Map2},
    printC "continue to decomp?",
    build-fo-subst LR [] FO_Subst,
    decompile-subst Map2 Links1 HO_Subst2 FO_Subst Sol1,
    print "## After decomp FO subst is" {fo.ppsubst Sol1},
    printC "continue to validate solution?",
    validate-solution LR Sol1,
    printC "continue to check solution vs expected?",
    check-sol Sol Sol1
  )  
    (D = error "decompl")
    (not (decompile-subst Map2 Links1 HO_Subst2 FO_Subst Sol1), print "Fail at decomp as expected")
    (print "Prolog failed at the expected step"),

].

type parse-triple pair diagnostic string -> triple diagnostic fo.fm fo.fm -> o.
parse-triple (pr D S) (triple D A B) :- parse-eq S A B.

macro @sok N SE SS :- (declare-test (xtest true) ptest (test N (pr [triple ok X Y] (some S))) :- parse-eq SE X Y, std.map SS parse S).
macro @sko N SE :- (declare-test (xtest true) ptest (test N (pr [triple (error "unif") X Y] none)) :- parse-eq SE X Y).
macro @sokl-call Mode N SX SS :- (declare-test (xtest Mode) ptest (test N (pr X (some S))) :- std.map SX parse-triple X, std.map SS parse S).
macro @sokl N SX SS :- @sokl-call true N SX SS.
macro @sokl-force-progress N SX SS :- @sokl-call comp.progress-beta-force N SX SS.
macro @sokl-delay N SX SS :- @sokl-call comp.suspend-out-of-lam N SX SS.

% macro @okl N E S :- (declare-test xtest ptest (test N (pr E (some S)))).

@sok 1 "f X = f a" ["a"].
% @ok 2 (@app [X  @a]) (@app [f, @a]) [f].                                           % here two solutions for X: fun _ => a, fun x => x
% @ok 3 (λx. @app [X  x  @a]) (λx. @app [f, x  @a]) [f].

@sko 4 "f X = X".
@sko 5 "f X  X = f a b".
@sok 6 "f X  Y  X = f (f Y) b (f b)" ["f b", "b"].
@sok 7 "λx. (f X) = λx. (f a)" ["a"].

% @sok 8 "λx. λy. (X  x  y) = λx. λy. (X  x  y)" [].

@sok 9  "λx. λy. (X  x  y) = λx. λy. (f y)" ["λx. f"].
@sok 90  "λx. λy. (X  y x) = (λx. f)" ["λx. λy. (f x)"].
@sokl 900  [
  % pr ok "λx. λy. (X  x  y) = λx. λy. (f y)",
  pr ok "λx. λy. (X  x  y) = λx. f",
] ["λx. f"].

@sok 10 "X = λx.λy.(X y x)" ["λx.λy.Y"].
@sokl 100 [ pr ok "λx.λy.(f y x) = λx.λy.(X y x)" ] ["f"].
@sokl 102 [
  pr ok "λx.(X x) = λx.λy.(f x)",
  pr ok "λx.λy.(X x y) = X",
] ["λx.λy.(f x)"].
@sokl 103 [
  pr ok "λx.λy.λz.(X x y z) = X",
  pr ok "λx.(X x) = λx.λy.(f x)",
] ["λx.λy.(f x)"].

@sokl 1000 [
  pr ok "λx. λy. (f (Y  y) (Z x  y)) = (λx. λy. (X  y x))",
  pr ok "Z = λx. λy. y",
  pr ok "Y = λx. a",
  pr ok "λx. (f a) = λx. λy. (X  y  x)",
 ] ["λx. λy. (f a x)", "λx. a", "λx. λy. y"].

@sokl 10000 [
  pr ok "λx. λy. (f (Y  x) (Z x  y)) = (λx. λy. (X  y  x))",
] ["λx. λy. (f (Y  y) (Z y x))"].

@sok 11 "λx. (X  x) = λx. (f x  x a)" ["λx. (f x  x a)"].
% @ok 12 (λx. @app [X  x  @a]) (λx. @app [f, x  x  @a]) [λx. @app [f, x  x]].                 % here two solutions for X: fun x _ => f x x a, fun x y => f x x y

@sokl 13 [
  pr ok "λx.(X x) = λx.(f x)", 
  pr ok "f = X"
] ["f"].


@sokl 131 [
   pr ok "λx.(X x) = f", % ci costringe a bucare il lambda, ci puo' essere una eta 
   pr ok "f = X"
] ["f"].

@sokl 132 [
  pr ok "λx.(X x) = λx.(f x x)",  % visto che buchiamo a sx  la link deve usare il PF sotto il lambda
  pr ok "X = λy.(f y y)"
] ["λy.(f y y)"] .

@sokl 15 [
  pr ok "X = λx.(f (Y x))", 
  pr (error "unif") "g = X"
] []. % we fail early for the wrong reason

@sokl 16 [
  pr ok "X = λx.(f (Y x))",
  pr ok "f = X",
] ["f", "λx.x"].

@sokl 160 [
  pr ok "X = λx.(f (Y x))", 
  pr ok "Y = λx.x", 
] ["f", "λx.x"].

@sokl 1600 [
  pr ok "f = λx.(f (X x))", 
  pr ok "f (λx.x) = f X",
] ["λx.x"].

@sokl 17 [
  pr ok "X = λx.x",
  % (pr ok (@app [X  @a]) (@a)),
  pr ok "X a = Y"
] ["λx.x", "a"]. % beta redex

@sokl 170 [
  pr ok "X = λx.x",
  pr ok "X a = a",
] ["λx.x"]. % beta redex

% @okl 18 [
%   (pr ok (λx. (X  x  @a]) (λx. (f, x  @a]))
% ] [].                                                                               % here two solutions for X: fun x _ => f x a, fun x y => f x y

% @okl 19 [
%   (pr ok (λx. (X  x  @a]) (λx. (f, @a]))
% ] [].                                                                               % here two solutions for X: fun _ _ => f a, fun _ x => f x

% @okl 20 [
%   (triple (error "comp1") (λx. (X  x  x  @a]) (λx. (f, x  @a]))
% ] []. % we are not in PF, X have two solutions: fun x _ => f x | fun _ x => f x

@sokl 21 [
  pr ok "λx.λy.(f y a) = λx.λy.(X x y)",
] ["λx.λy.(f y a)"].


% BUG: first decomp the eta, and then the normal links,
% or force the ta links when used in the normal links
@sokl 288 [
  pr ok "λx. λy.(X  y  x) = Y",
] ["_", "λx. λy. (X  y  x)"].

@sokl 22001 [
  pr ok "λx. λy.(Y y x) = Z",
  pr ok "g Z = X", 
  pr ok "g f = X",
] ["g f", "λx. λy.(f y x)", "f"].

@sokl 22000 [
  pr ok "g (λx. λy. (Y y x)) = X",
  pr ok "g f = X",
] ["g f", "λx. λy. (f y x)"].

@sokl 2200 [
  pr ok "λx. λy.(Y y x) = X",
  pr ok "f = X",
] ["f", "λx. λy.(f y x)"].

@sokl 220 [
  pr ok "λx.λy.(Y y x) = X",
  pr ok "λx.f = X",
] ["λx. f", "λx. λy.(f x)"].

@sokl 22 [
  pr ok "f = X",
  pr ok "λy.(Y y) = X",
] ["f", "f"].

@sokl 23 [
  pr ok "λx.(f (X  x)) = Y",
  pr ok "X = λx.x",
] ["λx.x", "f"].

@sokl 24 [
  pr ok "λx. x = X",
  pr ok "Y = λx.(f (X  x))",
] ["λx.x", "f"].

@sokl 25 [
  pr ok "λx. (f (X  x)) = Y",
  pr ok "X = λx. x",
  pr ok "Y = f",
] ["λx.x", "f"].

/*
  C = lam xy.y
  B = lam x.x
  A = lam xy. A (B x) (C x y)
*/

@sokl 26 [
  pr ok "λx.λy.(f (X  x) (Y  x  y) = f",
] ["λx.x", "λx.λy.y"].

/*
  (x\y\ f (A x) (B x y)) = f.
*/

% @okl 27 [
%   pr ok (λx. λy. (X  x  (Y  y]]) (λx. λy. (f, @a, @b])
% ] [].

@sokl 28 [
  pr ok "X = λx. λy. y",
  pr ok "Y = λx. x",
  pr ok "Z = λx. λy. (Z (Y  x) (X  x  y))",
] ["λx. λy. y", "λx. x", "W"].

@sokl 29 [
  pr ok "X = λx. λy. y",
  pr ok "Y = λx. x",
  pr ok "Z = λx. λy. (Z (Y  x) (X  x  x))",
] ["λx. λy. y", "λx. x", "λx. λy. (W x)"].

@sokl 30 [
    pr ok "X = λx. λy. a",
    pr ok "λx. a = λx. (X  x  x)",
] ["λx. λy. a"].

% TODO: se invertiamo i pb di unificazione deve andare per euristica
% di imitazione
@sokl 31 [
    pr ok "X = λx. λy.f",
    pr ok "λx.f = X a",
] ["λx.λy. f"].

@sokl 32 [
    pr ok "X = λx.λy. f",
    pr ok "λx.Y = X a",
] ["λx. λy. f", "f"].

% @sokl 33 [
%     pr ok "f = X a",
% ] ["λx.(Y x)"].

@sokl 34 [
    pr ok "X = λx.λy.λz.y",
    pr ok "λx.λy.(X x a y) = λx.λy.a",
] ["λx.λy.λz.y"].

@sokl 35 [
    pr ok "X = λx.λy.λz.x",
    pr ok "X a = Y"
] ["λx.λy.λz.x", "λx.λy.a"].

@sokl 355 [
    pr ok "X = λx.λy.λz.x",
    pr ok "X f g h a b = Y"
] ["λx.λy.λz.x", "f a b"].

@sokl 36 [
    pr ok "X = λx.x",
    pr ok "Y = λx.x",
    pr ok "Z = X (Y a)"
] ["λx.x","λx.x","a"].

@sokl 37 [
    pr ok "X = λx.x",
    pr ok "Y = (λx.(X x)) a"
] ["λx.x","a"].

@sokl 38 [
  pr ok "X = λx.λy.(Y y)",
  pr ok "Z = λx.x",
  pr ok "X a = Z"
] ["λx.λy.y", "λx.x", "λx.x"].

% TODO: se invertiamo i pb di unificazione deve andare per euristica
% di proiezione

% beta applied to more args than needed
@sokl 39 [
  pr ok "X = λx.λy.λz.y",
  pr ok "λy.(X y a b) = λy.a",
] ["λx.λy.λz.y"].

% @sokl 40 [
%   pr ok "λy.(X y a b) = λy.a",
%   pr (error "unif") "X = a",
% ] ["λx.λy.λz.y"].

@sokl 41 [
  pr (error "unif") "Y = (λx.(Y x)) a"
] [].

@sokl 42 [
  pr ok "λy.(X y) = λx. λy.(X y x)"
] ["λx.λy.Y"].

@sokl 43 [
  pr ok "λy.(X y) = λx. λy.(X x y)"
] ["Y"].

@sokl 50 [
  pr ok "X = a",
  pr ok "Y = λx.Z",
  pr ok "λx.(X x) = Y Z",
] ["a", "λx.a", "a"].

@sokl 51 [
  pr ok "Y = λx.Z",
  pr ok "X = a",
  pr ok "λx.(X x) = Y Z", % Note: in decompl, the list of link is empty
] ["a", "λx.a", "a"].

@sokl 44 [
  pr (error "unif") "X = λx.(f X (Y x))"
] [].

@sokl 440 [
  pr ok "X = λx.(f Y (Z x))",
  pr (error "unif") "Y = λx.(f X (Z x))",
] [].

@sokl 4400 [
  pr ok "X = λx.(f Y (W x))",
  pr ok "Y = λx.(f Z (W x))",
  pr (error "unif") "Z = λx.(f Y (W x))",
] [].

@sokl 45 [
  pr (error "unif") "λx.(X x) = λx.λy.(f X (Y x) y)"
] [].

@sokl 46 [
  pr ok             "λx.(X x) = Y",
  pr (error "unif") "Y = λx.λy.(f X (Y x) y)"
] [].

@sokl 47 [
  pr ok "λx.(X x) = Y",
  pr ok "Y = λx.λy.(X y x)"
] ["λx.λy.Z", "λx.λy.Z"].

@sokl 48 [
  pr (error "unif") "X = Y X",
] [].

% NOTE: here X is deduced by beta reducing Y and Z set in the next unif pb
@sokl 54 [
  pr ok "X = Y Z",
  pr ok "Y = λx.x",
  pr ok "Z = a",
] ["a", "λx.x", "a"].

@sokl 55 [
  pr ok "Y = λx.x",
  pr ok "Z = a",
  pr ok "λx.(X x) = Y Z",
] ["a", "λx.x", "a"].

@sokl 56 [
  pr ok "W = λx.λy.(Z y x)",
  pr ok "W = λx.λy.(X x y)",
  pr ok "W = λx.λy.λz.(Y y x z)",
] ["λx.λy.(C1 y x)", "_", "C1", "λx.λy.(C1 y x)"].

@sokl 58 [
  pr ok "λx.λy.(X y x) = λx.(f (W x))",
  pr (error "unif") "λx.λy.(X y x) = λx.(g (W x))",
] [].

@sokl 59 [
  pr ok "X = λx.λy.(x y)",
  pr ok "Y = λx.λy.(y x)",
  pr ok "λx.(X (Y x) f) = f",
] ["λx.x", "λx.λy.(y x)"].

@sokl 60 [
  pr ok "X = λx.(f x x)"
] ["λx.(f x x)"].

@sokl 61 [
  pr ok "X = λx.(f (λy.(g x y)) x)"
] ["λx.(f (g x) x)"].

@sokl 62 [
  pr ok "X = λx.(f (λy.(g x)) x)"
] ["λx.(f (λy.(g x)) x)"].

@sokl 63 [
  pr ok "X = λx.(f (λy.(g x (Y y))) x)"
] ["λx.(f (λy.(g x (Y y))) x)"].

@sokl 64 [
  pr ok "X = λx.(f (λy.(g x (Y y))) x)"
] ["λx.(f (λy.(g x (Y y))) x)"].

@sokl 65 [
  pr ok "X = λx.a",
  pr ok "λx.(f (X x)) = Y"
] ["λx.a","λx.(f a)"].

@sokl 66 [
  pr ok "X = λx.a",
  pr ok "λx.(f (X x)) = Y",
  pr ok "Y = λx.Z"
] ["λx.a","λx.(f a)", "f a"].

@sokl 67 [
  pr ok "λf.(X f) = λf.f",
  pr ok "λf.(X f a) = λf.(f a)",
] ["λf.f"].

@sokl 70 [
  pr ok "λx.λy.(X y x) = λx.λy.x",
  pr ok "λx.(f (X x) x) = f (λy.y)",
] ["λx.λy.y"].

@sokl 71 [
  pr ok "λx.λy.(X y x) = λx.λy.x",
] ["λx.λy.y"].

@sokl 72 [
  pr ok "λx.(f (X x) x) = f (λy.y)",
] ["λx.λy.y"].

@sokl 73 [
  pr ok "λx.λy.(f (X x) (X x y)) = λx.(f (λx.x))"
] ["λx.λy.y"].

@sokl 74 [
  pr ok "λx.(f (X x) x) = Y",
  pr ok "X = λx.x" 
] ["λx.x", "λx.(f x x)"].

@sokl 75 [
  pr ok "λx.λy.(f (X y) (X x) y) = Y",
  pr ok "X = λx.x" 
] ["λx.x", "λx.λy.(f y x y)"].


@sokl 78 [
  pr ok "λx.λy.(X y x) = λx.λy.x",
  pr (error "unif") "λx.λy.(f (X x) x) = f (λx.x)",
] [].

@sokl 80 [
  pr ok "X = λx.λy.λz.λw.(Y x y z)",
  pr ok "Y = λx.λy.λz.x",
  pr ok "X a b c d = a",
] ["λx.λy.λz.λw.x", "λx.λy.λz.x"].

% X = (x\w\Y x), Y = (x\x), X a b = a.
@sokl 81 [
  pr ok "X = λx.λw.(Y x)",
  pr ok "Y = λx.x",
  pr ok "X a b = a",
] ["λx.λy.x", "λx.x"].

@sokl 83 [
  pr ok "λx.λy.((X y) x) = λx.λy.(y x)" 
] ["λx.x"].

@sokl 84 [
  pr (error "unif") "λx.λy.(X x) = λx.λy.(y x)" 
] ["λx.x"].

@sokl 85 [
  pr ok "X = λx.λy.(Y y x)",
  pr ok "Y = λx.λy.(f y x)"
] ["f", "λx.λy.(f y x)"].

@sokl 95 [
  pr ok "λx.x = λx.λy.(X y x)",
] ["λx.λy.(y x)"].

@sokl 96 [
  pr ok "λx.λy.(x y) = λx.λy.(X y x)"
] ["λx.λy.(y x)"].

@sokl 97 [
  pr ok "(λx.x) a = a"
] [].

@sokl 98 [
  pr ok "λx.(f ((λy.y) x)) = f"
] [].

@sokl 99 [
  pr (error "unif") "X Y = X W"
] [].

@sokl 101 [
  pr (error "unif") "X Y = λx.(Z x)"
] [].

% From the paper
@sokl 7000 [
  pr ok "λx.(X x) = f"
] ["f"].

@sokl 7001 [
  pr ok "λx.λy.(X y x) = λx.λy.x",
  pr ok "λx.(f (X x) x) = Y",
] ["λx.λy.y", "f (λx.x)"].

@sokl 7002 [
  pr ok "λx.(X x) = λx.(Y x)"
] ["Y"].

@sokl 7003 [
  pr ok "X = λx.Y",
  pr ok "X a = a"
] ["λx.a", "a"].

@sokl 7004 [
  pr ok "X = λx.x",
  pr ok "λx.(Y (X x)) = f"
] ["λx.x", "f"].

@sokl-delay 7005 [
  pr ok "X a = a",
  pr ok "X = λx.Y",
] ["λx.a", "a"].

% TEST NON IN PF
@sokl 9001 [
  pr (error "unif") "λx.(X b x) = λx.(X a x)"
] [].

@sokl 9002 [
  pr (error "unif") "λx.(X x) = Y X",
] [].

@sokl 9003 [
  pr ok "X = Y Z"
] ["(Y Z)"].

% TEST DELAYED PF
@sokl-delay 5001 [
  pr ok "f = λx.λy.(X (Y x) (Z y))",
  pr ok "Y = λx.x",
  pr ok "Z = λx.x",
] ["f","λx.x", "λx.x"].

@sokl-delay 5002 [
  pr ok "f = λx.(X (Y x))",
  pr ok "Y = λx.x",
] ["f","λx.x"].

@sokl-delay 5003 [
  pr ok "X = λx.λy.(Y y x)",
  pr ok "X a b c d = d",
  pr ok "Y = λx.λy.λz.λw.w",
] ["λx.λy.λz.λw.w", "λx.λy.λz.λw.w"].

@sokl-delay 5004 [
  pr ok "X a = f (Z a)",
  pr (error "decompl") "Z = X" % Note: OC error not detected
] [].

@sokl-delay 5005 [
  pr ok "λx.(X x) = Y Z",
  pr ok "Y = λx.x",
  pr ok "Z = a",
] ["a", "λx.x", "a"].

% TEST FORCE UNIF OUT-LLAMBDA
@sokl-force-progress 4001 [
  pr ok "X a = f a"
] ["f"].

@sokl-force-progress 4002 [
  pr ok "λx.(X x a) = λx.(f x x b a)"
] ["λx.(f x x b)"].

@sokl-force-progress 4003 [
  pr (error "unif") "λx.(X x a) = λx.(f x x b)"
] [].

@sokl-force-progress 4004 [
  pr ok "X Y = X Z",
] ["_", "Z", "_"].