internal-test ho.test-unif-1.
internal-test ho.test-unif-2.
internal-test ho.test-unif-3.
internal-test ho.test-unif-4.
internal-test ho.test-unif-5.
internal-test ho.test-unif-6.
internal-test ho.test-unif-7.

namespace ho {
  shorten mem.{ set? , unset? , assign , new }.
%BEGIN

%SNIP: ho_subst
  kind inctx type -> type.                              %~($\customlabel{data:inctx}{\cdot\vdash\cdot}$)~
  type abs (tm -> inctx A) -> inctx A.
  type val A -> inctx A.
  typeabbrev assignment (inctx tm).
  typeabbrev subst (mem assignment).
%ENDSNIP

%SNIP: ho_tm
  kind tm  type.
  type app list tm -> tm.
  type lam (tm -> tm) -> tm.
  type con string -> tm.
  type uva addr -> list tm -> tm.
%ENDSNIP

%SNIP: ue_type
  % [unif T1 T2 SOld SNew] check if T1 and T2 unify looking into SOld. SNew is the final substution
  type (==l) tm -> tm -> subst -> subst -> o.
%ENDSNIP
  (A ==l B) C _ :- (var A; var B; var C), halt "Passed var to unif". %HIDE
  % congruence
  (con C ==l con C) S S.
  (app L1 ==l app L2) S S1 :- fold2 (==l) L1 L2 S S1.
  (lam F1 ==l lam F2) S S1 :- 
    pi x\ (pi S\ (x ==l x) S S) => (F1 x ==l F2 x) S S1.
  % set variables
  (uva N Args ==l T) S S1 :- 
    set? N S F,!, move F Args T1, (T1 ==l T) S S1.
  (T ==l uva N Args) S S1 :- 
    set? N S F,!, move F Args T1, (T ==l T1) S S1.
  % flex-flex
  (uva M A1 ==l uva N A2) S1 S2 :- !, 
    pattern-fragment A1, pattern-fragment A2, 
    prune! M A1 N A2 S1 S2.
  (uva N Args ==l T) S S1 :- not_occ N S T, pattern-fragment Args, 
    bind T Args T1, assign N S T1 S1.
  % variable assigment
  (T ==l uva N Args) S S1 :- not_occ N S T, pattern-fragment Args, 
    bind T Args T1, assign N S T1 S1.
  (N ==l N) S S :- name N. % HIDE since we may call ==l under some abs...
  % Note: eta & beta for unification is not allowed in ML over terms of the OL

  % Note: We suppose the scopes to always be in PF
  type prune! addr -> list tm -> addr -> 
              list tm -> subst -> subst -> o.
  /* no pruning needed */               
  prune! N A  N A  S S :- !.
  prune! M A  N A  S1 S2 :- !, bind (uva M A) A Ass, 
    assign N S1 Ass S2.
  /* prune different arguments */
  prune! N A1 N A2 S1 S3 :- !,
    std.assert!(len A1 {len A2}) "Not typechecking", !, % HIDE
    new S1 W S2, prune-same-variable W A1 A2 [] Ass,
    assign N S2 Ass S3.
  /* prune to the intersection of scopes */
  prune! N A1 M A2 S1 S4 :- !,
    new S1 W S2, prune-diff-variables W A1 A2 Ass1 Ass2, 
    assign N S2 Ass1 S3,
    assign M S3 Ass2 S4. 

  type prune-same-variable addr -> list tm -> list tm -> 
                            list tm -> assignment -> o.
  prune-same-variable N [] [] ACC (val (uva N Args)) :- 
    rev ACC Args.
  prune-same-variable N [X|XS] [X|YS] ACC (abs F) :- 
    pi x\ prune-same-variable N XS YS [x|ACC] (F x).
  prune-same-variable N [_|XS] [_|YS] ACC (abs F) :- 
    pi x\ prune-same-variable N XS YS ACC (F x).

  type permute list nat -> list tm -> list tm -> o.
  permute [] _ [].
  permute [P|PS] Args [T|TS] :-
    nth P Args T,
    permute PS Args TS.

  type build-perm-assign addr -> list tm -> list bool -> 
                      list nat -> assignment -> o.
  build-perm-assign N ArgsR [] Perm (val (uva N PermutedArgs)) :- 
    rev ArgsR Args, permute Perm Args PermutedArgs.
  build-perm-assign N Acc [tt|L] Perm (abs T) :- 
    pi x\ build-perm-assign N [x|Acc] L Perm (T x).
  build-perm-assign N Acc [ff|L] Perm (abs T) :- 
    pi x\ build-perm-assign N Acc L Perm (T x).

  type keep list A -> A -> bool -> o.
  keep L A tt :- mem L A, !.
  keep _ _ ff.

  type prune-diff-variables addr -> list tm -> list tm -> 
                            assignment -> assignment -> o.
  prune-diff-variables N Args1 Args2 Ass1 Ass2 :-
    map (keep Args2) Args1 Bits1, 
    map (keep Args1) Args2 Bits2,
    filter Args1 (mem Args2) ToKeep1,
    filter Args2 (mem Args1) ToKeep2,
    map (index ToKeep1) ToKeep1 IdPerm,
    map (index ToKeep1) ToKeep2 Perm21,
    build-perm-assign N [] Bits1 IdPerm Ass1,
    build-perm-assign N [] Bits2 Perm21 Ass2.

  type beta tm -> list tm -> tm -> o.
  beta A [] A :- !.
  beta (lam Bo) [H | L] R :- beta (Bo H) L R1, beta-aux R1 R.
  beta (app A) L (app X) :- append A L X.
  % beta (uva N A) L (uva N A') :- !, halt "XXX", append A L A'. % HIDE
  beta (con H) L (app [con H | L]).
  beta X L (app[X|L]) :- name X.

  type beta-aux tm -> tm -> o.
  beta-aux (app [HD|TL]) R :- !, beta HD TL R.
  beta-aux A A. 

  /* occur check for N before crossing a functor */
  type not_occ  addr -> subst -> tm -> o.
  not_occ N H T :- (var N; var H; var T), halt "Invalid call to not_occ". % HIDE
  not_occ N S (uva M Args) :- set? M S F, 
    move F Args T, not_occ N S T.
  not_occ N S (uva M Args) :- unset? M S, not (M = N),
    forall1 (not_occ_aux N S) Args.
  not_occ _ _ (con _).
  not_occ N S (app L) :- not_occ_aux N S (app L).
  /* Note: lam is a functor for the meta language! */
  not_occ N S (lam L) :- pi x\ not_occ_aux N S (L x).
  not_occ _ _ X :- name X.
  /* finding N is ok */
  not_occ N _ (uva N _).

  /* occur check for X after crossing a functor */
  type not_occ_aux addr -> subst -> tm -> o.
  not_occ_aux N H T :- (var N; var H; var T), halt "Invalid call to not_occ_aux". % HIDE
  not_occ_aux N S (uva M _) :- unset? M S, not (N = M).
  not_occ_aux N S (uva M Args) :- set? M S F, 
    move F Args T, not_occ_aux N S T.
  not_occ_aux N S (app L) :- forall1 (not_occ_aux N S) L.
  not_occ_aux N S (lam F) :- pi x\ not_occ_aux N S (F x).
  not_occ_aux _ _ (con _).
  not_occ_aux _ _ X :- name X.
  /* finding N is ko, hence no rule */
  
  /* copy T T' vails if T contains a free variable, i.e. it
     performs scope checking for bind */
  type copy tm -> tm -> o.
  copy (con C)   (con C).
  copy (app L)   (app L') :- map copy L L'.
  copy (lam T)   (lam T') :- pi x\ copy x x => copy (T x) (T' x).
  copy (uva A L) (uva A L') :- map copy L L'.

  type bind tm -> list tm -> assignment -> o.
  bind T [] (val T') :- copy T T'.
  bind T [X | TL] (abs T') :- pi x\ copy X x => bind T TL (T' x).

%SNIP: deref
  type deref subst -> tm -> tm -> o.                   %~($\customlabel{pred:deref}{\sigma t}$)~
  deref S X _ :- (var S; var X), halt "flex deref". % HIDE
  deref _ (con C) (con C).
  deref S (app A) (app B) :- map (deref S) A B.
  deref S (lam F) (lam G) :-
    pi x\ deref S x x => deref S (F x) (G x).
  deref S (uva N L) R :- set? N S A,
    move A L T, deref S T R.
  deref S (uva N A) (uva N B) :- unset? N S,
    map (deref S) A B.
  deref _ N         N          :- name N. % HIDE
%ENDSNIP

%SNIP: move
  type move assignment -> list tm -> tm -> o.
  move (abs Bo) [H|L] R :- move (Bo H) L R.
  move (val A)  [] A.
                        % !. % to ease traces?
  % move (val (uva N A)) L     (uva N X) :- append A L X.
  move (abs A)         []    _ :- !, fatal "Invalid move call: too few args for abs" A. % HIDE
  move A               L    _ :- !, fatal "Invalid move call:" A L. % HIDE

%ENDSNIP

  type deref-assmt subst -> assignment -> assignment -> o.
  deref-assmt S (abs T) (abs R) :- pi x\ deref-assmt S (T x) (R x).
  deref-assmt S (val T) (val R) :- deref S T R.
%END

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PRINTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  macro @binder-names :- ["x", "y", "z", "w"].

  type lambda string -> o.
  lambda "\\lambda " :- tex, !.
  lambda "Î»".

  type appsep string -> o.
  appsep "\\appsep " :- tex, !.
  appsep " ".

  type print_uva_scope mem.addr -> string -> string -> o.
  print_uva_scope N S R :- tex, !, R is {ppuva N} ^ "_{" ^ S ^ "}".
  print_uva_scope N S R :- R is "`" ^ {ppuva N} ^ " " ^ S ^ "'".

  type pp1 list string -> tm -> string -> o.
  type pp tm -> string -> o.
  pp T S :- pp1 @binder-names T S.
  pp1 BN (app [lam F|L]) S :- !, pp1 BN (lam F) H, std.string.concat {appsep} {std.map L (pp1 BN)} X, S is "((" ^ H ^ ") " ^ X ^ ")".
  pp1 BN (app L) S :- !, std.string.concat {appsep} {std.map L (pp1 BN)} X, S is "(" ^ X ^ ")".
  pp1 _ (con S) S :- !.
  pp1 [X|XS] (lam F) S :- !, pi x\ (pp1 _ x X :- !) => pp1 XS (F x) S1, S is {lambda} ^ X ^ "." ^ S1.
  pp1 [] (lam F) S :- !, pi x\ (pp1 _ x X :- !), pp1 [] (F x) S1, S is {lambda} ^ X ^ "." ^ S1.
  pp1 _ (uva N []) S :- !, S is {ppuva N}.
  pp1 BN (uva N L) S :- !, std.string.concat " " {std.map L (pp1 BN)} X, !, print_uva_scope N X S.
  pp1 _ X S :- name X, !, std.any->string X S.
  pp1 _ _ "ERROR".

  type ppuva addr -> string -> o.
  ppuva N S :- 
    mem.ppaddr N M,
    ppuva.aux M S.
  ppuva.aux "0" "A" :- !.
  ppuva.aux "1" "B" :- !.
  ppuva.aux "2" "C" :- !.
  ppuva.aux "3" "D" :- !.
  ppuva.aux "4" "E" :- !.
  ppuva.aux "5" "F" :- !.
  ppuva.aux "6" "G" :- !.
  ppuva.aux "7" "H" :- !.
  ppuva.aux "8" "I" :- !.
  ppuva.aux "9" "J" :- !.
  ppuva.aux N S :- S is "E" ^ N.

  type ppsubst subst -> list string -> o.
  ppsubst L S :- mem.pp L ppuva ppass S.

  type ppass-tex list string -> assignment -> list string -> string -> o.
  ppass-tex [A|As] (abs F) L S :- !, pi x\ (pp1 _ x A :- !) => ppass-tex As (F x) [A | L] S.
  ppass-tex [] (abs F) L S :- pi x\ ppass-tex [] (F x) [{std.any->string x} | L] S.
  ppass-tex BN (val T) L S :- 
    S is "_{" ^ {std.string.concat "~" L} ^ "} \\mapsto " ^ {pp1 BN T}. 

  type ppass assignment -> string -> o.
  ppass A S :- tex, !, ppass-tex @binder-names A [] S.
  ppass A S :- ppass1 @binder-names A S.

  type ppass1 list string -> assignment -> string -> o.
  ppass1 [] (abs F) S :- pi x\ std.any->string x N, ppass1 [] (F x) S1, S is N ^ " " ^ S1.
  ppass1 [X|XS] (abs F) S :- pi x\ (pp1 _ x X :- !) => ppass1 XS (F x) S1, S is X ^ " " ^ S1.
  ppass1 XS (val T) S :- S is ":= " ^ {pp1 XS T}.

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TESTS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  macro @mem-uva N S :- uva (mem.addr N) S.

  type test-unif-1 o.
  type test-unif-2 o.
  type test-unif-3 o.
  type test-unif-4 o.
  type test-unif-5 o.
  type test-unif-6 o.
  type test-unif-7 o.

  test-unif-1 :- pi x\
    (@mem-uva z [x] ==l @mem-uva (s z) []) [none, none] L,
    Z = (abs x\ val (uva X [])),
    SZ = val (uva X []),
    L = [some Z, some SZ|_].

  test-unif-2 :- pi x y\
    (@mem-uva z [x, y] ==l @mem-uva (s z) [y]) [none, none] L,
    Z = (abs x\ abs y\ val (uva X [y])),
    SZ = (abs x\ val (uva X [x])),
    L = [some Z, some SZ|_].

  test-unif-3 :- pi x y w\
    (@mem-uva z [x, y] ==l @mem-uva (s z) [x, w, y]) [none, none] L,
    Z = (abs x\ abs y\ val (uva X [x, y])),
    SZ = (abs x\ abs y\ abs z\ val (uva X [x, z])),
    L = [some Z, some SZ|_].

  test-unif-4 :- pi x y\ 
    (@mem-uva z [x, y] ==l @mem-uva (s z) [y, x]) [none, none] L,
    Z = (abs x\ abs y\ val (uva X [x, y])),
    SZ = (abs x\ abs y\ val (uva X [y, x])),
    L = [some Z, some SZ|_].

  test-unif-5 :- pi x y zz w\
    (@mem-uva z [x, w, y] ==l @mem-uva (s z) [y, zz, w]) [none, none] L,
    Z = (abs c0\ abs c1\ abs c2\ val (uva X [c1, c2])),
    SZ = (abs c0\ abs c1\ abs c2\ val (uva X [c2, c0])),
    L = [some Z, some SZ|_].

  test-unif-6 :- pi x y zz w\
    (@mem-uva (s z) [y, zz, w] ==l @mem-uva z [x, w, y]) [none, none] L,
    Z = (abs c0\ abs c1\ abs c2\ val (uva X [c2, c1])),
    SZ = (abs c0\ abs c1\ abs c2\ val (uva X [c0, c2])),
    L = [some Z, some SZ|_].

  test-unif-7 :- pi x y w zz\
    (@mem-uva z [x, y, w] ==l @mem-uva z [zz, y, x]) [none] L,
    L = [some (abs x\ abs y\ abs z\ val (uva _ [y])) | _].
}
